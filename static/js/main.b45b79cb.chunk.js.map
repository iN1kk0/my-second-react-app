{"version":3,"sources":["store/constants/products.js","components/Products/index.js","components/Basket/index.js","store/constants/theme.js","components/darkThemeToggle.js","App.js","store/reducers/productsReducer.js","store/reducers/themeReducer.js","store/index.js","index.js"],"names":["ADD_PRODUCT","REMOVE_PRODUCT","Product","styled","div","ProductName","ProductButtonsWrapper","ProductButtonsWrapperButton","button","ProductButtonsWrapperDiv","Products","dispatch","useDispatch","products","useSelector","store","productsReducer","items","onAdd","event","id","target","dataset","type","constants","payload","onRemove","find","product","count","className","map","name","price","onClick","Button","Basket","filter","reduce","a","b","TOGGLE_DARKTHEME","DarkThemeToggle","darkThemeEnabled","state","themeReducer","checked","onChange","backgroundColor","theme","light","dark","textColor","MyApp","Wrapper","App","initialState","rootReducer","combineReducers","action","item","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b45b79cb.chunk.js","sourcesContent":["export const ADD_PRODUCT = \"Add product\";\r\nexport const REMOVE_PRODUCT = \"Remove product\";","import { useSelector, useDispatch } from \"react-redux\";\r\nimport * as constants from \"../../store/constants/products\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Product = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nconst ProductName = styled.div`\r\n  font-size: 30px;\r\n  font-weight: 300;\r\n`;\r\n\r\nconst ProductButtonsWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  border-radius: 40px;\r\n  height: 40px;\r\n  overflow: hidden;\r\n  min-width: 110px;\r\n`;\r\n\r\nconst ProductButtonsWrapperButton = styled.button`\r\n  background: #4d8cea;\r\n  width: 100%;\r\n  outline: none;\r\n  border: none;\r\n  color: white;\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n  height: 100%;\r\n  font-weight: 300;\r\n`;\r\n\r\nconst ProductButtonsWrapperDiv = styled.div`\r\n  background: #4d8cea;\r\n  min-width: 40px;\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n`;\r\n\r\nexport default function Products() {\r\n  const dispatch = useDispatch();\r\n  const products = useSelector((store) => store.productsReducer.items);\r\n\r\n  const onAdd = (event) => {\r\n    const { id } = event.target.dataset;\r\n\r\n    dispatch({\r\n      type: constants.ADD_PRODUCT,\r\n      payload: { id },\r\n    });\r\n  };\r\n\r\n  const onRemove = (event) => {\r\n    const { id } = event.target.dataset;\r\n    const product = products.find((product) => product.id === id);\r\n\r\n    if (product.count >= 1) {\r\n      dispatch({\r\n        type: constants.REMOVE_PRODUCT,\r\n        payload: { id },\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"products\">\r\n      <h1>Products</h1>\r\n      {products.map((product) => (\r\n        <Product key={product.id}>\r\n          <ProductName>\r\n            {product.name} - ${product.price}\r\n          </ProductName>\r\n          <ProductButtonsWrapper>\r\n            <ProductButtonsWrapperButton\r\n              data-id={product.id}\r\n              onClick={onRemove}\r\n            >\r\n              -\r\n            </ProductButtonsWrapperButton>\r\n            <ProductButtonsWrapperDiv>\r\n              <span>{product.count || \"0\"}</span>\r\n            </ProductButtonsWrapperDiv>\r\n            <ProductButtonsWrapperButton data-id={product.id} onClick={onAdd}>\r\n              +\r\n            </ProductButtonsWrapperButton>\r\n          </ProductButtonsWrapper>\r\n        </Product>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n  background: #dc5b5b;\r\n  outline: none;\r\n  border: none;\r\n  color: white;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n  font-weight: 300;\r\n  border-radius: 2px;\r\n  width: fit-content;\r\n  padding: 15px 30px;\r\n  margin: 20px auto;\r\n`;\r\n\r\nexport default function Basket() {\r\n  const products = useSelector((store) => store.productsReducer.items);\r\n  const price = products\r\n    .filter((product) => !!product.count)\r\n    .map((product) => product.price * product.count)\r\n    .reduce((a, b) => a + b, 0);\r\n\r\n  return price ? <Button>Checkout (${price})</Button> : null;\r\n}\r\n","export const TOGGLE_DARKTHEME = \"TOGGLE_DARKTHEME\";","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport * as constants from \"../store/constants/theme\";\r\n\r\nexport const DarkThemeToggle = () => {\r\n  const darkThemeEnabled = useSelector(\r\n    (state) => state.themeReducer.darkThemeEnabled\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <p>\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={darkThemeEnabled}\r\n        onChange={() => dispatch({ type: constants.TOGGLE_DARKTHEME })}\r\n      /> <span>Use Dark Theme</span>\r\n    </p>\r\n  );\r\n};\r\n","import Products from \"./components/Products\";\nimport Basket from \"./components/Basket\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport theme from \"styled-theming\";\nimport { useSelector } from \"react-redux\";\nimport { DarkThemeToggle } from \"./components/darkThemeToggle\";\n\nexport const backgroundColor = theme(\"theme\", {\n  light: \"#fff\",\n  dark: \"#2d2d2d\",\n});\n\nexport const textColor = theme(\"theme\", {\n  light: \"#000\",\n  dark: \"#fff\",\n});\n\nconst MyApp = styled.div`\n  background-color: ${backgroundColor};\n  color: ${textColor};\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 600px;\n  padding: 20px;\n  margin: auto;\n`;\n\nfunction App() {\n  const darkThemeEnabled = useSelector(\n    (state) => state.themeReducer.darkThemeEnabled\n  );\n\n  return (\n    <ThemeProvider theme={{ theme: darkThemeEnabled ? \"dark\" : \"light\" }}>\n      <MyApp>\n        <Wrapper>\n          <DarkThemeToggle />\n          <Products />\n          <Basket />\n        </Wrapper>\n      </MyApp>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import * as constants from \"../constants/products\";\r\n\r\nconst initialState = {\r\n  items: [\r\n    { id: \"1\", name: \"PS5\", price: 750, count: 0 },\r\n    { id: \"2\", name: \"Xbox\", price: 650, count: 0 },\r\n    { id: \"3\", name: \"RTX3090\", price: 3000, count: 0 },\r\n  ],\r\n};\r\n\r\nexport const productsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case constants.ADD_PRODUCT:\r\n      return {\r\n        ...state,\r\n        items: state.items.map((item) => {\r\n          if (item.id === action.payload.id) {\r\n            return {\r\n              ...item,\r\n              count: item.count + 1,\r\n            };\r\n          }\r\n\r\n          return item;\r\n        }),\r\n      };\r\n\r\n    case constants.REMOVE_PRODUCT:\r\n      return {\r\n        ...state,\r\n        items: state.items.map((item) => {\r\n          if (item.id === action.payload.id) {\r\n            return {\r\n              ...item,\r\n              count: item.count - 1,\r\n            };\r\n          }\r\n\r\n          return item;\r\n        }),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as constants from \"../constants/theme\";\r\n\r\nconst initialState = {\r\n  darkThemeEnabled: false,\r\n};\r\n\r\nexport const themeReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case constants.TOGGLE_DARKTHEME:\r\n      return { ...state, darkThemeEnabled: !state.darkThemeEnabled };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport { productsReducer } from \"./reducers/productsReducer\";\r\nimport { themeReducer } from \"./reducers/themeReducer\";\r\n\r\nconst rootReducer = combineReducers({ productsReducer, themeReducer });\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport App from './App';\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}